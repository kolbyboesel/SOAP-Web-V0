@page "/ConfirmPayment"

@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime

<PageTitle>Confirm Payment</PageTitle>

<head>
  <link rel="stylesheet" href="/css/style.css" asp-append-version="true" />
  <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
  <link rel="stylesheet" href="/lib/bootstrap/dist/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
</head>

<body>
<style>
body {
  background-image: url('https://images.squarespace-cdn.com/content/v1/5b352a76f93fd4a1745161a8/1530580533507-XFJITGNH91P5QQGMSX4Q/layout-background.jpg?format=2500w');
  background-repeat: no-repeat;
  background-attachment: fixed;
  background-size: cover;
}
</style>

<header class="w3-container w3-center" style="height: 25%; padding-top: 20%;">
  <h1 class="w3-margin w3-jumbo"
    style="color: white; font-family:Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;">Daily Sports Scores
  </h1>
  <h2
    style="color: white; font-family:Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif; font-size:2vh">Please create an account to see daily AI betting picks, as well as my daily picks!
  </h2>
</header>
<div class="alert alert-success">
  <strong>Success!</strong> Payment successful
</div>

<footer class="footer text-muted" style="position: absolute;">
        <div class="container footerText" style="color: white;">
            &copy; 2023 - SportsScores - <a style="color: white;" asp-area="" asp-page="/Privacy">Privacy</a>
        </div>
</footer>
</body>

@code
{

public class User
{
    public ObjectId _id { get; set; }
    public string LoginID { get; set; }
    public string PasswordID { get; set; }
    public string PaidConfirm { get; set; }


}

    private IMongoCollection<User> _newUser;

protected override async Task OnAfterRenderAsync(bool firstRender)
  {
  const string connectionUri = "mongodb+srv://kolbyzboesel:Kolby344@sportsscores.anxznpk.mongodb.net/?retryWrites=true&w=majority";
        var settings = MongoClientSettings.FromConnectionString(connectionUri);
        settings.ServerApi = new ServerApi(ServerApiVersion.V1);
        var client = new MongoClient(settings);
        var usersList = client.GetDatabase("Login_Data");
        _newUser = usersList.GetCollection<User>("Login_Info");

        var username = HttpContextAccessor.HttpContext.Request.Cookies["CurrentUser"];
        var password = HttpContextAccessor.HttpContext.Request.Cookies["CurrentPassword"];

        var filter = Builders<User>.Filter
            .Eq(r => r.LoginID, username.ToString());

        var oldUser = _newUser.Find(filter).First();
        var oldId = oldUser._id;

        User updateUser = new()
        {
            _id = oldId,
            LoginID = username,
            PasswordID = password,
            PaidConfirm = "Yes",
        };

        await _newUser.ReplaceOneAsync(filter, updateUser);

        await JSRuntime.InvokeVoidAsync("cookieInterop.deleteCookie", "CurrentPassword");
        await JSRuntime.InvokeVoidAsync("cookieInterop.deleteCookie", "PaidConfirm");
        await JSRuntime.InvokeVoidAsync("cookieInterop.setCookie", "PaidConfirm", "Yes", null, null, null, null);

        NavigationManager.NavigateTo("/AccountHome",forceLoad:true);
  }
}