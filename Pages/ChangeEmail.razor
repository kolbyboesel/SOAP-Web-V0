@page "/ChangeEmail"
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime

<PageTitle>Change Email</PageTitle>

<head>
  <link rel="stylesheet" href="/css/style.css" asp-append-version="true" />
  <link rel="stylesheet" href="/css/account.css" asp-append-version="true" />
  <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
</head>
<style>
  body{
    background-color: #4e54c8!important;
  }
</style>
<body>
   <!-- The Modal -->
<div class="modal" style="height: 100%; display: block" >

<div class="container">
  <!-- Modal Content -->
      <!-- Put error message here -->
  <EditForm Model="@formData" OnValidSubmit="HandleFormSubmit" class="modal-content animate mobileScreen" style="height:82%">

    <div class="container">
      <label for="email"><b>New Email</b></label>
      <InputText @bind-Value="@formData.Email" type="text" class="form-control" placeholder="Enter New Email" id="email" name="email" required/>

      <label for="confirmEmail"><b>Confirm New Email</b></label>
      <InputText @bind-Value="@formData.EmailRepeat" type="text" class="form-control" placeholder="Reenter Email" id="confirmEmail" name="confirmEmail" required/>

    <label for="password"><b>Enter Password to Verify</b></label>
      <InputText @bind-Value="@formData.Password" type="password" class="form-control" placeholder="Enter Password" id="password" name="password" required/>

      <button type="submit" style="border-radius:5px">Confirm</button>
    </div>

    <div class="container" style="border-radius:10px">
      <a type="button" href="/AccountHome" class="cancelbtn" style="border-radius:5px">Cancel</a>
    </div>
  </EditForm>
  </div>
</div>
</body>

@code
{
    private FormDataModel formData = new FormDataModel();
    private IMongoCollection<User> _newUser;

    public class FormDataModel
    {
    public string Email { get; set; }
    public string EmailRepeat { get; set; }
    public string Password { get; set; }

    }
    public class User
    {

        public ObjectId _id { get; set; }
        public string LoginID { get; set; }
        public string PasswordID { get; set; }
        public string PaidConfirm { get; set; }


    }
    private async void HandleFormSubmit()
    {
      const string connectionUri = "mongodb+srv://kolbyzboesel:Kolby344@sportsscores.anxznpk.mongodb.net/?retryWrites=true&w=majority";
        var settings = MongoClientSettings.FromConnectionString(connectionUri);
        settings.ServerApi = new ServerApi(ServerApiVersion.V1);
        var client = new MongoClient(settings);
        var usersList = client.GetDatabase("Login_Data");
        _newUser = usersList.GetCollection<User>("Login_Info");

        var username = HttpContextAccessor.HttpContext.Request.Cookies["CurrentUser"];

        var filter = Builders<User>.Filter
            .Eq(r => r.LoginID, username.ToString());

        var oldUser = _newUser.Find(filter).First();
        var oldId = oldUser._id;
        var oldPassword = oldUser.PasswordID;
        var oldUsername = oldUser.LoginID;

        var newEmail = formData.Email;
        var confirmEmail = formData.EmailRepeat;
        var password = formData.Password;
        
        if(newEmail.ToString().Contains("@")){
            if(newEmail == confirmEmail){
                if(oldPassword == password){
                    User updateUser = new()
                    {
                        _id = oldId,
                        LoginID = newEmail,
                        PasswordID = oldPassword,
                        PaidConfirm = "Yes",
                    };

                    await _newUser.ReplaceOneAsync(filter, updateUser);

                    await JSRuntime.InvokeVoidAsync("cookieInterop.setCookie", "CurrentUser", newEmail, null, null, null, null);
                    await JSRuntime.InvokeVoidAsync("cookieInterop.setCookie", "ChangedEmail", "yes", null, null, null, null);
                    await JSRuntime.InvokeVoidAsync("cookieInterop.deleteCookie", "ChangedPassword");
                    NavigationManager.NavigateTo("/AccountHome");
                } else {
                    NavigationManager.NavigateTo("/ChangeEmail", forceLoad: true);
                    await JSRuntime.InvokeAsync<object>("Alert", "Incorrect Password");
                }
            }else{
                NavigationManager.NavigateTo("/ChangeEmail", forceLoad: true);
                await JSRuntime.InvokeAsync<object>("Alert", "Email Does Not Match");
            }
        } else {
            NavigationManager.NavigateTo("/ChangeEmail", forceLoad: true);
            await JSRuntime.InvokeAsync<object>("Alert", "Invalid Email, Please Include " + "@" + " Symbol");
        }
    }
}

