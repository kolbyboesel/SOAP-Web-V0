@page "/Signup"
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime

<PageTitle>Signup</PageTitle>

<head>
    <link rel="stylesheet" href="/css/style.css" asp-append-version="true" />
    <link rel="stylesheet" href="/css/loginSignup.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
</head>
<style>
  body{
    background-color: #4e54c8!important;
  }
</style>

<body>
    <!-- The Modal -->
<div class="modal" style="height: 100%;">

<div class="container" style="padding-top: 50px;">

    <!-- Put error message here -->
  <EditForm Model="@formData" OnValidSubmit="HandleFormSubmit" style="border: none; height:82%" class="modal-content animate mobileScreen">
      <div id="signupForm" class="container">
        <h1>Sign Up</h1>
        <p>Please fill in this form to create an account.</p>
        <hr>
        <label for="username"><b>Email</b></label>
        <InputText @bind-Value="@formData.Email" id="username" type="text" placeholder="Enter Email" name="username" required/>

        <label for="psw"><b>Password</b></label>
        <InputText @bind-Value="@formData.Psw" id="password" type="password" placeholder="Enter Password" name="password" required/>

        <label for="psw-repeat"><b>Repeat Password</b></label>
        <InputText @bind-Value="@formData.PswRepeat" id="passwordRepeat" type="password" placeholder="Repeat Password" name="password-repeat" required/>

        <p>By creating an account you agree to our <a href="/Privacy" style="color:dodgerblue">Terms & Privacy</a>.</p>

        <button type="submit" >Sign Up</button>

        <div class="container" style="background-color:white; padding-left: 0">
          <a type="button" href="/" class="cancelbtn">Cancel</a>
        </div>
       </div>
  </EditForm>
  </div>
</div>
</body>
@code
{
  private IMongoCollection<User> _newUser;

  public class User
    {

        public ObjectId _id { get; set; }
        public string LoginID { get; set; }
        public string PasswordID { get; set; }
        public string PaidConfirm { get; set; }


    }
  public class LoginInfoResponseModel
  {
    [JsonPropertyName("LoginID")]

    public string LoginId { get; set; }

    [JsonPropertyName("PasswordID")]
    public string PasswordId { get; set; }
    [JsonPropertyName("PaidConfirm")]

    public string PaidConfirm { get; set; }
  }

  public class DocumentModel
  {
    [JsonPropertyName("document")]
    public LoginInfoResponseModel Document { get; set; }
  }

  public class DocumentsModel
  {
    [JsonPropertyName("documents")]
    public List<LoginInfoResponseModel> Documents { get; set; }
  }

  public class MongoDbRequestModel
  {
    public string collection { get; set; }
    public string database { get; set; }
    public string dataSource { get; set; }
  }
  public class FormDataModel
  {
    public string Email { get; set; }
    public string Psw { get; set; }
    public string PswRepeat { get; set; }

  }
  private FormDataModel formData = new FormDataModel();

  private async void HandleFormSubmit()
  {
    const string connectionUri = "mongodb+srv://kolbyzboesel:Kolby344@sportsscores.anxznpk.mongodb.net/?retryWrites=true&w=majority";
        var settings = MongoClientSettings.FromConnectionString(connectionUri);
        settings.ServerApi = new ServerApi(ServerApiVersion.V1);
        var client = new MongoClient(settings);
        var usersList = client.GetDatabase("Login_Data");
        _newUser = usersList.GetCollection<User>("Login_Info");

        var username = formData.Email;
        var password = formData.Psw;
        var confirm_password = formData.PswRepeat;

        var filter = Builders<User>.Filter
            .Eq(r => r.LoginID, username.ToString());

        if(username.ToString().Contains("@"))
        {
            if (_newUser.Find(filter).FirstOrDefault() == null)
            {
              if (password == confirm_password)
              {
                User newUser = new()
                {
                    LoginID = username,
                    PasswordID = password,
                    PaidConfirm = "No",
                };

                await _newUser.InsertOneAsync(newUser);
                await JSRuntime.InvokeVoidAsync("cookieInterop.setCookie", "CurrentUser", username, null, null, null, null);
                await JSRuntime.InvokeVoidAsync("cookieInterop.setCookie", "CurrentPassword", password, null, null, null, null);
                await JSRuntime.InvokeVoidAsync("cookieInterop.setCookie", "PaidConfirm", "No", null, null, null, null);
                await JSRuntime.InvokeVoidAsync("cookieInterop.setCookie", "signedUp", "yes", null, null, null, null);
                await JSRuntime.InvokeVoidAsync("cookieInterop.deleteCookie", "loggedIn");

                NavigationManager.NavigateTo("/Payment");
              }
              else if(password != confirm_password)
              {
                NavigationManager.NavigateTo("/Signup", forceLoad: true);
                await JSRuntime.InvokeAsync<object>("Alert", "Passwords Do Not Match!");
              }
            }
            else if (_newUser.Find(filter).FirstOrDefault() != null)
            {
              NavigationManager.NavigateTo("/Signup", forceLoad: true);
              await JSRuntime.InvokeAsync<object>("Alert", "Username Already Taken!");     
            }
        }else if(!username.ToString().Contains("@"))
        {
          NavigationManager.NavigateTo("/Signup", forceLoad: true);
          await JSRuntime.InvokeAsync<object>("Alert", "Invalid Email, Please Include " + "@" + " Symbol!");
        }
  }
}