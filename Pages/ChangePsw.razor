@page "/ChangePsw"
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime

<PageTitle>Change Password</PageTitle>

<head>
  <link rel="stylesheet" href="/css/MainStyle.css" asp-append-version="true" />
  <link rel="stylesheet" href="/css/ModalElements.css" asp-append-version="true" />
  <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
</head>
<style>
  body{
    background-color: #dbb5b2!important;
  }
</style>
<body>

   <!-- The Modal -->
<div class="modal" style="height: 100%; display: block;">

<div class="container">
  <!-- Add Alert Here -->

  <EditForm Model="@formData" OnValidSubmit="HandleFormSubmit" class="modal-content animate mobileScreen" style="height:82%">

    <div class="container">
      <label for="email"><b>Enter Old Password</b></label>
      <InputText @bind-Value="@formData.OldPSW" type="password" class="form-control" placeholder="Enter Old Password" id="oldPassword" name="oldPassword" required/>

      <label for="confirmEmail"><b>Enter New Password</b></label>
      <InputText @bind-Value="@formData.NewPSW" type="password" class="form-control" placeholder="Enter New Password" id="newPassword" name="newPassword" required/>

    <label for="password"><b>Confirm New Password</b></label>
      <InputText @bind-Value="@formData.NewPSWRepeat" type="password" class="form-control" placeholder="Confirm New Paassword" id="confirmPassword" name="confirmPassword" required/>

      <button type="submit" style="border-radius:5px">Confirm</button>
    </div>

    <div class="container" style="border-radius:10px">
      <a type="button" @onclick=CancelPressed href="" class="cancelbtn" style="border-radius:5px">Cancel</a>
    </div>
  </EditForm>
  </div>
</div>
</body>

@code
{
  public async Task CancelPressed()
  {
    await JSRuntime.InvokeVoidAsync("cookieInterop.setCookie", "showAccount", "true", null, null, null, null);
    NavigationManager.NavigateTo("/",forceLoad:true);
  }
    private FormDataModel formData = new FormDataModel();
    private IMongoCollection<User> _newUser;

    public class FormDataModel
    {
    public string OldPSW { get; set; }
    public string NewPSW { get; set; }
    public string NewPSWRepeat { get; set; }

    }
    public class User
    {

        public ObjectId _id { get; set; }
        public string LoginID { get; set; }
        public string PasswordID { get; set; }
        public string PaidConfirm { get; set; }


    }
    private async void HandleFormSubmit()
    {
      const string connectionUri = "mongodb+srv://kolbyzboesel:Kolby344@sportsscores.anxznpk.mongodb.net/?retryWrites=true&w=majority";
        var settings = MongoClientSettings.FromConnectionString(connectionUri);
        settings.ServerApi = new ServerApi(ServerApiVersion.V1);
        var client = new MongoClient(settings);
        var usersList = client.GetDatabase("Login_Data");
        _newUser = usersList.GetCollection<User>("Login_Info");

        var username = HttpContextAccessor.HttpContext.Request.Cookies["CurrentUser"];

        var filter = Builders<User>.Filter
            .Eq(r => r.LoginID, username.ToString());

        var oldUser = _newUser.Find(filter).First();
        var oldId = oldUser._id;
        var oldPassword = oldUser.PasswordID;
        var oldUsername = oldUser.LoginID;

        var oldConfirmPassword = formData.OldPSW;
        var newPassword = formData.NewPSW;
        var confirmPassword = formData.NewPSWRepeat;

        if (oldPassword == oldConfirmPassword)
        {
            if (newPassword == confirmPassword)
            {
                User updateUser = new()
                {
                    _id = oldId,
                    LoginID = oldUsername,
                    PasswordID = newPassword,
                    PaidConfirm = "Yes",
                };

                await _newUser.ReplaceOneAsync(filter, updateUser);

                await JSRuntime.InvokeVoidAsync("cookieInterop.setCookie", "ChangedPassword", "yes", null, null, null, null);
                await JSRuntime.InvokeVoidAsync("cookieInterop.deleteCookie", "ChangedEmail");
                NavigationManager.NavigateTo("/AccountHome");
            }
            else
            {
              NavigationManager.NavigateTo("/ChangePsw", forceLoad: true);
              await JSRuntime.InvokeAsync<object>("Alert", "Passwords do not match");

            }
        }
        else
        {
            NavigationManager.NavigateTo("/ChangePsw", forceLoad: true);
              await JSRuntime.InvokeAsync<object>("Alert", "Incorrect Password");
        }
    }

}